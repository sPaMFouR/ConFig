# Terminal Cheat Sheet for using GitHub
-----------------------------------------------------------------------------------------------------------------------
1. Create Project
-----------------------------------------------------------------------------------------------------------------------
mkdir project
cd project/
git init                                # Initializes the Git repository/repo
git add README.md                       # Adds a markdown README file
git add .                               # Adds the 'Unknown' files
git reset                               # Unstage all changes
git commit                              # Commits all changes
git commit -m <message>                 # Commits all changes with a message
git rm --cached <file>...               # Command to undo, in case you forgot .gitignore
git config credential.helper store      # Used to save your credentials (username and password) for GIT in the .init
                                        # folder for future logins. The login will be saved once you enter this command
                                        # on the terminal followed by a command which requires login.
git config --global user.name <name>    # To include user name as a part of the information in a commit
git config --global user.email <email>  # To include user email as a part of the information in a commit
git config --global color.ui true       # Add color to Git output
git config --list                       # Check all configuration settings
-----------------------------------------------------------------------------------------------------------------------
2. Quick Start
-----------------------------------------------------------------------------------------------------------------------
git clone <url>                         # Obtains a local copy of an existing repo
git pull <url>                          # Updates the local copy with new commits in the master branch of the remote repo
git pull <url> <branch>                 # Updates the local copy with new commits in the specified branch of the remote repo
git checkout -b <new-branch>            # Creates a new local branch
git checkout <branch>                   # Checkout to the specified branch
git push -u origin <new-branch>         # Syncs local branch with remote
git push origin <branch>                # Pushes all local commits to the remote
git status                              # Checks the status of the changes made to the repo
git remote -v                           # View the remote repos
git remote add origin <url>             # Adds the link/tag "origin" to the remote repo
-----------------------------------------------------------------------------------------------------------------------
3. Branching and Merging
-----------------------------------------------------------------------------------------------------------------------
git branch                              # Shows a list of all branches (* is active)
git checkout master                     # Takes you back to the master branch
git branch -m <oldname> <newname>       # Renames the specified branch
git branch -m <newname>                 # Renames the current branch

git checkout <branch> && git merge master   # Merge the branch to the master branch            
-----------------------------------------------------------------------------------------------------------------------
4. Delete Project
-----------------------------------------------------------------------------------------------------------------------
git branch -d <branchname>              # Deletes the local branch
git push origin :<branchname>           # Deletes the remote branch
-----------------------------------------------------------------------------------------------------------------------

































5. Merging Upstream

git remote -v                                                                   # Get list of remote branches
git remote add upstream <upstream github url>   # Add original as upstream
git remote -v                                                                   # Check upstream

git fetch upstream                                                              # Get original repo
git checkout development                                                # Switch to main branch in local fork
git merge upstream/development                                  # Merge original with fork

git diff --name-only | uniq | xargs subl                # Fix conflicts in Sublime Text



### Importing Patches
git apply < ../p/foo.patch
git commit -a



### Exporting Patches
<make changes>
git commit -a -m "commit message"
git format-patch HEAD^  # creates 0001-commit-message.txt
                        # (HEAD^ means every patch since one revision before the
                        # tip of the branch, also known as HEAD)




### Inspecting Revisions

# inspect history visually
gitk    # this opens a Tk window, and shows you how the revisions are connected

# inspect history
git log     # this pipes a log of the current branch into your PAGER
git log -p  # ditto, but append a patch after each commit message

# inspect a specific commit
git show HEAD   # show commit info, diffstat and patch
                # of the tip of the current branch



### Referring to Revisions

# by name
git log v1.0.0  # show history leading up to tag "v1.0.0"
git log master  # show history of branch "master"

# relative to a name
git show master^    # show parent to last revision of master
git show master~2   # show grand parent to tip of master
git show master~3   # show great grand parent to tip of master (you get the idea)

# by output of "git describe"
git show v1.4.4-g730996f    # you get this string by calling "git describe"

# by hash (internally, all objects are identified by a hash)
git show f665776185ad074b236c00751d666da7d1977dbe
git show f665776    # a unique prefix is sufficient

# tag a revision
git tag v1.0.0                      # make current HEAD known as "v1.0.0"
git tag interesting v1.4.4-g730996f # tag a specific revision (not HEAD)



### Comparing Revisions
# diff between two branches
git diff origin..master             # pipes a diff into PAGER
git diff origin..master > my.patch  # pipes a diff into my.patch

# get diffstat of uncommitted work
git diff --stat HEAD



git subtree push --prefix docs origin gh-pages  # push docs as subtree to gh-pages


